// admin/src/Components/PopupSettings/PopupSettings.jsx
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import './PopupSettings.css';

const PopupSettings = () => {
  const [image, setImage]       = useState(null);
  const [effect, setEffect]     = useState('animate__zoomIn');
  const [position, setPosition] = useState('center');
  const [popups, setPopups]     = useState([]);
  const [editId, setEditId]     = useState(null);

  // load t·∫•t c·∫£ popup
  useEffect(() => {
    fetchPopups();
  }, []);

  const fetchPopups = async () => {
    try {
      const { data } = await axios.get('http://localhost:4000/popups');
      setPopups(data);
    } catch (err) {
      console.error(err);
      setPopups([]);
    }
  };

  const handleImageChange = e => {
    const file = e.target.files[0];
    if (!file) return;
    const reader = new FileReader();
    reader.onloadend = () => setImage(reader.result);
    reader.readAsDataURL(file);
  };

  const handleSave = async () => {
    if (!image) return alert('Ch·ªçn ·∫£nh tr∆∞·ªõc!');
    const payload = { imageUrl: image, effect, position };
    try {
      if (editId) {
        await axios.put(`http://localhost:4000/popup/${editId}`, payload);
        alert('‚úèÔ∏è C·∫≠p nh·∫≠t popup th√†nh c√¥ng!');
      } else {
        await axios.post('http://localhost:4000/popup', payload);
        alert('‚úÖ ƒê√£ th√™m popup m·ªõi!');
      }
      setImage(null);
      setEffect('animate__zoomIn');
      setPosition('center');
      setEditId(null);
      fetchPopups();
    } catch (err) {
      console.error(err);
      alert('‚ùå L·ªói khi l∆∞u popup');
    }
  };

  const handleEdit = p => {
    setImage(p.imageUrl);
    setEffect(p.effect);
    setPosition(p.position);
    setEditId(p._id);
  };

  const handleDelete = async id => {
    if (!window.confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a?')) return;
    try {
      await axios.delete(`http://localhost:4000/popup/${id}`);
      alert('üóëÔ∏è ƒê√£ x√≥a popup');
      fetchPopups();
    } catch (err) {
      console.error(err);
      alert('‚ùå X√≥a th·∫•t b·∫°i');
    }
  };

  return (
    <div className="popup-settings">
      <h2>{editId ? 'S·ª≠a Popup' : 'Th√™m Popup'}</h2>

      <div className="form-group">
        <label>Ch·ªçn ·∫£nh:</label>
        <input type="file" accept="image/*" onChange={handleImageChange} />
        {image && <img src={image} alt="Preview" className="preview-img" />}
      </div>

      <div className="form-group">
        <label>Hi·ªáu ·ª©ng:</label>
        <select value={effect} onChange={e => setEffect(e.target.value)}>
          <option value="animate__zoomIn">Zoom In</option>
          <option value="animate__fadeInDown">Fade In Down</option>
          <option value="animate__bounceIn">Bounce In</option>
          <option value="animate__lightSpeedInLeft">Light Speed Left</option>
        </select>
      </div>

      <div className="form-group">
        <label>V·ªã tr√≠:</label>
        <select value={position} onChange={e => setPosition(e.target.value)}>
          <option value="left">Tr√°i</option>
          <option value="right">Ph·∫£i</option>
          <option value="bottom">D∆∞·ªõi</option>
          <option value="center">Gi·ªØa</option>
        </select>
      </div>

      <button onClick={handleSave}>
        {editId ? 'C·∫≠p nh·∫≠t' : 'L∆∞u c√†i ƒë·∫∑t'}
      </button>

      <h3>Danh s√°ch popup</h3>
      <div className="popup-list">
        {popups.map(p => (
          <div key={p._id} className="popup-item">
            <img src={p.imageUrl} alt="" />
            <div>{p.effect} ‚Äî {p.position}</div>
            <button onClick={() => handleEdit(p)}>‚úèÔ∏è S·ª≠a</button>
            <button onClick={() => handleDelete(p._id)}>üóëÔ∏è X√≥a</button>
          </div>
        ))}
      </div>
    </div>
  );
};

export default PopupSettings;
